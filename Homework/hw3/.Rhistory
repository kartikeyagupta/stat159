dev.off()
png("./images/histogram-newspaper.png")
hist(ad$Newspaper, xlab = "Newspaper", main = "Histogram of Newspaper Ads")
dev.off()
png("./images/histogram-radio.png")
hist(ad$Sales, xlab = "Radio", main = "Histogram of Radio Ads ")
dev.off()
png("./images/histogram-sales.png")
hist(ad$Sales, xlab = "Sales", main = "Histogram of Ad Sales ")
dev.off()
reg$y
ad$Sales
load(file = "./../data/regression.RData")
load(file = "./../../data/regression.RData")
load(file = "./data/regression.RData")
load(file = "./../code/functions/regression-functions.r")
load(file = "./code/functions/regression-functions.r")
source(file = "./code/functions/regression-functions.r")
library(xtable)
load(file = "./data/regression.RData")
source(file = "./code/functions/regression-functions.r")
load(file = "./data/regression.RData")
source(file = "./code/functions/regression-functions.r")
library(xtable)
load(file = "./data/regression.RData")
source(file = "./code/functions/regression-functions.r")
print(xtable(reg,caption = "Regression Output"), comment = FALSE)
load(file = "./data/regression.RData")
library("xtable")
?xtable
getwd()
load(file = "./data/regression.RData")
print(xtable(reg,caption = "Regression Output"), comment = FALSE)
```{r eval=TRUE, echo=FALSE, results='asis', message=FALSE}
library(xtable)
load(file = "./data/regression.RData")
load(file = "./../data/regression.RData")
load(file = "./data/regression.RData")
getwd()
getwd()
load(file = "./../data/regression.RData")
load(file = "./../data/regression.RData")
load(file = "./../data/regression.RData")
load(file = "./data/regression.RData")
library("xtable")
#args = commandArgs(trailingOnly = TRUE)
#ad = read.csv(args[1], row.names = 1)
ad = read.csv("./data/Advertising.csv", row.names = 1)
reg = lm(Sales ~ TV + Radio + Newspaper, ad, y = TRUE, x= TRUE)
summary(reg)
png("./images/scatterplot-tv-sales.png")
plot(ad$TV, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~TV, ad))
dev.off()
png("./images/scatterplot-radio-sales.png")
plot(ad$Radio, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~Radio, ad))
dev.off()
png("./images/scatterplot-newspaper-sales.png")
plot(ad$Newspaper, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~Newspaper, ad))
dev.off()
png("./images/residual-plot.png")
plot(reg, which = c(1))
dev.off()
png("./images/scale-location-plot.png")
plot(reg, which = c(3))
dev.off()
png("./images/normal-qq-plot.png")
plot(reg, which = c(2))
dev.off()
save(reg, file= "./data/regression.RData")
#stargazer(reg, type = "text", out = "./data/Tv~Sales-Reg.txt")
#Quantity = c("Residual Standard Error","R2","F-Statistic")
#Value = c(as.numeric(sqrt(sum(as.vector(summary(reg)$residuals)^2)/(length(summary(reg)$residuals)-2))), as.numeric(summary(reg)$r.squared), as.numeric((summary(reg)$fstatistic)[1]))
#valuetable = data.frame(Quantity, Value)
#regtable = xtable(reg)
#valuetable = xtable(valuetable)
source(file = "./../code/functions/regression-functions.r")
library("xtable")
#args = commandArgs(trailingOnly = TRUE)
#ad = read.csv(args[1], row.names = 1)
ad = read.csv("./data/Advertising.csv", row.names = 1)
reg = lm(Sales ~ TV + Radio + Newspaper, ad, y = TRUE, x= TRUE)
summary(reg)
png("./images/scatterplot-tv-sales.png")
plot(ad$TV, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~TV, ad))
dev.off()
png("./images/scatterplot-radio-sales.png")
plot(ad$Radio, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~Radio, ad))
dev.off()
png("./images/scatterplot-newspaper-sales.png")
plot(ad$Newspaper, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~Newspaper, ad))
dev.off()
png("./images/residual-plot.png")
plot(reg, which = c(1))
dev.off()
png("./images/scale-location-plot.png")
plot(reg, which = c(3))
dev.off()
png("./images/normal-qq-plot.png")
plot(reg, which = c(2))
dev.off()
save(reg, file= "./data/regression.RData")
#stargazer(reg, type = "text", out = "./data/Tv~Sales-Reg.txt")
#Quantity = c("Residual Standard Error","R2","F-Statistic")
#Value = c(as.numeric(sqrt(sum(as.vector(summary(reg)$residuals)^2)/(length(summary(reg)$residuals)-2))), as.numeric(summary(reg)$r.squared), as.numeric((summary(reg)$fstatistic)[1]))
#valuetable = data.frame(Quantity, Value)
#regtable = xtable(reg)
#valuetable = xtable(valuetable)
library('corrplot')
library('lattice')
library('ggplot2')
#args = commandArgs(trailingOnly = TRUE)
#ad = read.csv(args[1], row.names = 1)
ad = read.csv("./data/Advertising.csv", row.names = 1)
correlation = cor(ad, use="complete.obs")
sink("./data/eda-output.txt")
print("Summary Statistics of Sales")
summary(ad$Sales)
print("Summary Statistics of TV")
summary(ad$TV)
print("Summary Statistics of Radio")
summary(ad$Radio)
print("Summary Statistics of Newspaper")
summary(ad$Newspaper)
print("Summary of Correlation between different variables")
correlation
sink()
save(correlation, file= "./data/correlation-matrix.RData")
corrplot(cor(ad, use="complete.obs") , method = 'circle', main = "Correlation Matrix")
png("./images/scatterplot-matrix.png")
pairs(ad[1:4], pch = 21)
dev.off()
png("./images/histogram-tv.png")
hist(ad$TV, xlab = "TV", main = "Histogram of Ad TV")
dev.off()
png("./images/histogram-sales.png")
hist(ad$Sales, xlab = "Sales", main = "Histogram of Ad Sales ")
dev.off()
png("./images/histogram-newspaper.png")
hist(ad$Newspaper, xlab = "Newspaper", main = "Histogram of Newspaper Ads")
dev.off()
png("./images/histogram-radio.png")
hist(ad$Sales, xlab = "Radio", main = "Histogram of Radio Ads ")
dev.off()
load(file = "./../data/correlation-matrix.RData")
correlation
xtable(correlation)
library("xtable")
#args = commandArgs(trailingOnly = TRUE)
#ad = read.csv(args[1], row.names = 1)
ad = read.csv("./data/Advertising.csv", row.names = 1)
reg = lm(Sales ~ TV + Radio + Newspaper, ad, y = TRUE, x= TRUE)
summary(reg)
png("./images/scatterplot-tv-sales.png")
plot(ad$TV, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~TV, ad))
dev.off()
png("./images/scatterplot-radio-sales.png")
plot(ad$Radio, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "Radio", ylab = "Sales",main = "Regression of Sales on Radio with Ad Data" )
abline(lm(Sales~Radio, ad))
dev.off()
png("./images/scatterplot-newspaper-sales.png")
plot(ad$Newspaper, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "Newspaper", ylab = "Sales",main = "Regression of Sales on Newspaper with Ad Data" )
abline(lm(Sales~Newspaper, ad))
dev.off()
png("./images/residual-plot.png")
plot(reg, which = c(1))
dev.off()
png("./images/scale-location-plot.png")
plot(reg, which = c(3))
dev.off()
png("./images/normal-qq-plot.png")
plot(reg, which = c(2))
dev.off()
save(reg, file= "./data/regression.RData")
#stargazer(reg, type = "text", out = "./data/Tv~Sales-Reg.txt")
#Quantity = c("Residual Standard Error","R2","F-Statistic")
#Value = c(as.numeric(sqrt(sum(as.vector(summary(reg)$residuals)^2)/(length(summary(reg)$residuals)-2))), as.numeric(summary(reg)$r.squared), as.numeric((summary(reg)$fstatistic)[1]))
#valuetable = data.frame(Quantity, Value)
#regtable = xtable(reg)
#valuetable = xtable(valuetable)
simple = read.csv("./../data/Advertising.csv")
simple = read.csv("./data/Advertising.csv")
print(xtable(lm(Sales~Newspaper, simple),caption = "Regression Output"), comment = FALSE)
xtable(lm(Sales~TV, simple),caption = "Regression of Sales on TV")
reg
reg[1]
reg$coefficients
reg$coefficients[1]
reg$coefficients[2]
as.numeric(reg$coefficients[2])
reg$coefficients
as.numeric(reg$coefficients[5])
x = summary(reg)
x$coefficients
tv = lm(Sales~TV, simple)
summary(tv)$coefficients
summary(tv)$coefficients[6]
news = lm(Sales~Newspaper, simple)
(news$coefficients)[1]
(news$coefficients)[1]*1000
source("./functions/regression-functions.R")
source("functions/regression-functions.R")
getwd()
source("code/functions/regression-functions.R")
reg = lm(mpg ~ disp+hp, mtcars)
reg = lm(mpg ~ disp + hp, mtcars)
regsum = summary(reg)
x = reg$residuals^2
x
x = sum(reg$residuals^2)
x
expect_type(range_value(x,TRUE), 'numeric')
library("testthat")
expect_type(range_value(x,TRUE), 'numeric')
expect_type(residual_sum_squares(x), 'numeric')
expect_type(residual_sum_squares(x), 'double')
expect_type(residual_sum_squares(x), 'int')
expect_type(residual_sum_squares(x), 'integer')
expect_type(residual_sum_squares(reg), 'double')
expect_length(residual_sum_squares(reg), 1)
expect_equal(residual_sum_squares(reg), 4)
x
expect_equal(residual_sum_squares(reg), x)
x = sum((mtcars$mpg - mean(mtcars$mpg))^2)
View(total_sum_squares)
expect_equal(total_sum_squares(reg), x)
total_sum_squares(reg)
expect_length(residual_sum_squares(reg), 1)
expect_type(residual_sum_squares(reg), 'double')
x = regsum$sigma
expect_equal(residual_std_error(reg), x)
reg = lm(mpg ~ disp + hp, mtcars, y=TRUE, x=TRUE)
regsum = summary(reg)
x = sum((mtcars$mpg - mean(mtcars$mpg))^2)
expect_equal(total_sum_squares(reg), x)
x = regsum$sigma
expect_equal(residual_std_error(reg), x)
expect_that(residual_std_error(reg), equals(x, tolerance= 0.1))
expect_that(residual_std_error(reg), equals(x, tolerance= 0.05))
expect_that(residual_std_error(reg), equals(x, tolerance= 0.0001))
expect_that(residual_std_error(reg), equals(x, tolerance= 0.1))
expect_length(residual_std_error(reg), 1)
expect_type(residual_std_error(reg), 'double')
expect_that(r_squared(reg), equals(x, tolerance= 0.1))
x = regsum$r.squared
expect_that(r_squared(reg), equals(x, tolerance= 0.1))
expect_that(r_squared(reg), equals(x, tolerance= 0.01))
expect_length(r_squared(reg), 1)
expect_type(r_squared(reg), 'double')
x = regsum$fstatistic[1]
expect_that(f_statistic(reg), equals(x, tolerance= 0.01))
x = regsum$fstatistic[1]
expect_that(f_statistic(reg), equals(x, tolerance= 0.01))
expect_equal(f_statistic(reg),x)
x
f_statistic(reg)
expect_equal(f_statistic(reg),as.numeric(x)()
)
expect_equal(f_statistic(reg),as.numeric(x))
expect_that(f_statistic(reg),equals(as.numeric(x), tolerance = 0.1*f_statistic(reg))
0.1*f_statistic(reg)
0.1*f_statistic(reg)
expect_length(f_statistic(reg), 1)
expect_type(f_statistic(reg), 'double')
expect_that(f_statistic(reg),equals(as.numeric(x), tolerance = 0.1*f_statistic(reg)))
expect_length(f_statistic(reg), 1)
expect_type(f_statistic(reg), 'double')
library(testthat)
# loading all function files
source("test-regression.R")
# run unit tests in folder 'tests/'
test_dir("tests", reporter = "Summary")
getwd()
source("code/test-regression.R")
source("functions/test-regression.R")
source("function/regression-functions.R")
source("functions/regression-functions.R")
test_dir("tests", reporter = "Summary")
source("./code/functions/regression-functions.R")
test_dir("./code/tests", reporter = "Summary")
source("./code/functions/regression-functions.R")
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
source("./code/functions/regression-functions.R")
test_dir("./code/tests", reporter = "Summary")
source("./code/functions/regression-functions.r")
test_dir("./code/tests", reporter = "Summary")
source("./code/functions/regression-functions.R")
test_dir("./code/tests", reporter = "Summary")
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
source("../functions/regression-functions.R")
source("./code/functions/regression-functions.R")
library(testthat)
# loading all function files
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
source("../code/functions/regression-functions.R")
source("./../code/functions/regression-functions.R")
source("code/functions/regression-functions.R")
source("code/functions/regression-functions.R")
library(testthat)
# loading all function files
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
load(file = "./../data/regression.RData")
load(file = "./../data/correlation-matrix.RData")
source(file = "./../code/functions/regression-functions.r")
library("xtable")
#args = commandArgs(trailingOnly = TRUE)
#ad = read.csv(args[1], row.names = 1)
ad = read.csv("./data/Advertising.csv", row.names = 1)
reg = lm(Sales ~ TV + Radio + Newspaper, ad, y = TRUE, x= TRUE)
summary(reg)
png("./images/scatterplot-tv-sales.png")
plot(ad$TV, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "TV", ylab = "Sales",main = "Regression of Sales on TV with Ad Data" )
abline(lm(Sales~TV, ad))
dev.off()
png("./images/scatterplot-radio-sales.png")
plot(ad$Radio, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "Radio", ylab = "Sales",main = "Regression of Sales on Radio with Ad Data" )
abline(lm(Sales~Radio, ad))
dev.off()
png("./images/scatterplot-newspaper-sales.png")
plot(ad$Newspaper, ad$Sales, pch=16, col=rgb(255,0,0,150,maxColorValue=255), xlab = "Newspaper", ylab = "Sales",main = "Regression of Sales on Newspaper with Ad Data" )
abline(lm(Sales~Newspaper, ad))
dev.off()
png("./images/residual-plot.png")
plot(reg, which = c(1))
dev.off()
png("./images/scale-location-plot.png")
plot(reg, which = c(3))
dev.off()
png("./images/normal-qq-plot.png")
plot(reg, which = c(2))
dev.off()
save(reg, file= "./data/regression.RData")
#stargazer(reg, type = "text", out = "./data/Tv~Sales-Reg.txt")
#Quantity = c("Residual Standard Error","R2","F-Statistic")
#Value = c(as.numeric(sqrt(sum(as.vector(summary(reg)$residuals)^2)/(length(summary(reg)$residuals)-2))), as.numeric(summary(reg)$r.squared), as.numeric((summary(reg)$fstatistic)[1]))
#valuetable = data.frame(Quantity, Value)
#regtable = xtable(reg)
#valuetable = xtable(valuetable)
library('lattice')
library('ggplot2')
#args = commandArgs(trailingOnly = TRUE)
#ad = read.csv(args[1], row.names = 1)
ad = read.csv("./data/Advertising.csv", row.names = 1)
correlation = cor(ad, use="complete.obs")
sink("./data/eda-output.txt")
print("Summary Statistics of Sales")
summary(ad$Sales)
print("Summary Statistics of TV")
summary(ad$TV)
print("Summary Statistics of Radio")
summary(ad$Radio)
print("Summary Statistics of Newspaper")
summary(ad$Newspaper)
print("Summary of Correlation between different variables")
correlation
sink()
save(correlation, file= "./data/correlation-matrix.RData")
png("./images/scatterplot-matrix.png")
pairs(ad[1:4], pch = 21)
dev.off()
png("./images/histogram-tv.png")
hist(ad$TV, xlab = "TV", main = "Histogram of Ad TV")
dev.off()
png("./images/histogram-sales.png")
hist(ad$Sales, xlab = "Sales", main = "Histogram of Ad Sales ")
dev.off()
png("./images/histogram-newspaper.png")
hist(ad$Newspaper, xlab = "Newspaper", main = "Histogram of Newspaper Ads")
dev.off()
png("./images/histogram-radio.png")
hist(ad$Sales, xlab = "Radio", main = "Histogram of Radio Ads ")
dev.off()
library('corrplot')
library('lattice')
library('ggplot2')
library("xtable")
sink("./session-info.txt")
sessionInfo()
sink()
library("testthat")
# loading the source code of the functions to be tested
source("./code/functions/regression-functions.R")
# testing regressino functions. Will use defualt mtcars from R database.
reg = lm(mpg ~ disp + hp, mtcars, y=TRUE, x=TRUE)
regsum = summary(reg)
context("Tests for RSS, TSS, RSE, R2, F-Stat Functions")
test_that("Whether RSS returns correct value", {
x = sum(reg$residuals^2)
expect_equal(residual_sum_squares(reg), x)
expect_length(residual_sum_squares(reg), 2)
expect_type(residual_sum_squares(reg), 'double')
})
test_that("Whether RSS returns correct value", {
x = sum(reg$residuals^2)
expect_equal(residual_sum_squares(reg), x)
expect_length(residual_sum_squares(reg), 1)
expect_type(residual_sum_squares(reg), 'double')
})
test_that("Whether TSS returns correct value", {
x = sum((mtcars$mpg - mean(mtcars$mpg))^2)
expect_equal(total_sum_squares(reg), x)
expect_length(residual_sum_squares(reg), 1)
expect_type(residual_sum_squares(reg), 'double')
})
test_that("Whether RSE returns correct value", {
x = regsum$sigma
expect_that(residual_std_error(reg), equals(x, tolerance= 0.1))
expect_length(residual_std_error(reg), 1)
expect_type(residual_std_error(reg), 'double')
})
test_that("Whether R2 returns correct value", {
x = regsum$r.squared
expect_that(r_squared(reg), equals(x, tolerance= 0.01))
expect_length(r_squared(reg), 1)
expect_type(r_squared(reg), 'double')
})
test_that("Whether F-statistic returns correct value", {
x = regsum$fstatistic[1]
expect_that(f_statistic(reg),equals(as.numeric(x), tolerance = 0.1*f_statistic(reg)))
expect_length(f_statistic(reg), 1)
expect_type(f_statistic(reg), 'double')
})
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
getwd()
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
test_dir("./code/tests", reporter = "Summary")
source("./../functions/regression-functions.R")
library(testthat)
# loading all function files
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
library(testthat)
# loading all function files
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
library(testthat)
# loading all function files
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
library("testthat")
# loading the source code of the functions to be tested
source("./../functions/regression-functions.R")
source("./../functions/regression-functions.R")
# testing regressino functions. Will use defualt mtcars from R database.
reg = lm(mpg ~ disp + hp, mtcars, y=TRUE, x=TRUE)
regsum = summary(reg)
context("Tests for RSS, TSS, RSE, R2, F-Stat Functions")
test_that("Whether RSS returns correct value", {
x = sum(reg$residuals^2)
expect_equal(residual_sum_squares(reg), x)
expect_length(residual_sum_squares(reg), 1)
expect_type(residual_sum_squares(reg), 'double')
})
test_that("Whether TSS returns correct value", {
x = sum((mtcars$mpg - mean(mtcars$mpg))^2)
expect_equal(total_sum_squares(reg), x)
expect_length(residual_sum_squares(reg), 1)
expect_type(residual_sum_squares(reg), 'double')
})
test_that("Whether RSE returns correct value", {
x = regsum$sigma
expect_that(residual_std_error(reg), equals(x, tolerance= 0.1))
expect_length(residual_std_error(reg), 1)
expect_type(residual_std_error(reg), 'double')
})
test_that("Whether R2 returns correct value", {
x = regsum$r.squared
expect_that(r_squared(reg), equals(x, tolerance= 0.01))
expect_length(r_squared(reg), 1)
expect_type(r_squared(reg), 'double')
})
test_that("Whether F-statistic returns correct value", {
x = regsum$fstatistic[1]
expect_that(f_statistic(reg),equals(as.numeric(x), tolerance = 0.1*f_statistic(reg)))
expect_length(f_statistic(reg), 1)
expect_type(f_statistic(reg), 'double')
})
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
library(testthat)
# loading all function files
source("./code/functions/regression-functions.r")
# run unit tests in folder 'tests/'
test_dir("./code/tests", reporter = "Summary")
save(reg, file= "./data/regression.RData")
tv = lm(Sales~TV, simple)
radio = lm(Sales~Radio, simple)
